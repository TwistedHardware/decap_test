---
import { getCollection } from "astro:content";
import { languages, defaultLang } from "@/i18n/ui.ts";
import { getT } from '@/i18n/t.astro'
const lang = Astro.currentLocale || defaultLang;
const t = getT(lang);

const langKey = lang as keyof typeof languages;

const currentPath = Astro.url.pathname;
const baseUrl = import.meta.env.BASE_URL;

const pathWithoutBase = baseUrl
  ? currentPath.replace(new RegExp(`^${baseUrl}`), '')
  : currentPath;

const pathSegments = pathWithoutBase.replace(/^\/|\/$/g, '').split('/').filter(p => p);
const baseSegments = pathSegments.filter(segment => !Object.keys(languages).includes(segment));
const deepPathURLS = ["products", "support"]
const languageLinks = Object.entries(languages).map(([code, name]) => {
  let newPathSegments = [];

  const isCollectionPage = baseSegments.length > 0 && deepPathURLS.includes(baseSegments[0]);

  if (isCollectionPage) {
    newPathSegments = [baseSegments[0], code, ...baseSegments.slice(1)];
  } else {
    newPathSegments = [code, ...baseSegments];
  }

  const href = '/' + newPathSegments.join('/') + '/';
  
  return { code, name, href };
});

// This tells Astro to generate each menu item
const pages = await getCollection("pages");
let menuPages = pages
	.filter(
		(page) => page.data.main_menu === true && page.slug.startsWith(`${lang}/`),
	)
	.sort((a, b) => (a.data.order ?? Infinity) - (b.data.order ?? Infinity))
	.map((page) => ({
		slug: page.slug,
		name: page.data.name,
		order: page.data.order,
	}));

menuPages = menuPages.map(link => {
	switch (link.slug) {
		case `${lang}/products`:
			link.slug = `products/${lang}`;
			return link;
		case `${lang}/support`:
			link.slug = `support/${lang}`;
			return link;
		default:
			return link;
	}
});

const BASE_URL = import.meta.env.BASE_URL;
const homeURL = (lang == defaultLang) ? `${BASE_URL}` : `${BASE_URL}/${lang}`
const currentPage = Astro.url.pathname;
---

<nav
	class="bg-white dark:bg-zinc-900 fixed w-full z-20 top-0 start-0 border-b border-gray-200 dark:border-gray-600"
>
	<div
		class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4"
	>
		<a href={homeURL} class="flex items-center space-x-3 rtl:space-x-reverse">
			<img
				src=`${BASE_URL}/static/images/tejory_logo.png`
				class="h-6 md:h-8"
				alt="Tejory logo"
			/>
		</a>
		<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
			<div class="relative">
				<button
					id="languageSelector"
					data-dropdown-toggle="dropdown"
					class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-2 py-2.5 text-center inline-flex items-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
					type="button"
				>
					{languages[langKey]}
					<svg
						class="w-2.5 h-2.5 ms-3"
						aria-hidden="true"
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 10 6"
					>
						<path
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="m1 1 4 4 4-4"></path>
					</svg>
				</button>

				<div
					id="languageMenu"
					class="absolute top-full right-0 mt-2 z-10 hidden bg-white divide-y divide-gray-100 rounded-lg shadow-sm w-44 dark:bg-gray-700"
				>
					<ul
						class="py-2 text-sm text-gray-700 dark:text-gray-200"
						aria-labelledby="dropdownDefaultButton"
					>
						{
							languageLinks.map((link) => (
								<li>
									<a href=`${BASE_URL}${link.href}` class="block px-4 py-2 hover:bg-gray-800">
										{link.name}
									</a>
								</li>
							))
						}
					</ul>
				</div>
			</div>
		</div>
		<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
			<button
				data-collapse-toggle="navbar-sticky"
				type="button"
				class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
				aria-controls="navbar-sticky"
				aria-expanded="false"
				id="hamburger-button"
			>
				<span class="sr-only">Open main menu</span>
				<svg
					class="w-5 h-5"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 17 14"
				>
					<path
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M1 1h15M1 7h15M1 13h15"></path>
				</svg>
			</button>
		</div>
		<div
			class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
			id="navbar-sticky"
		>
			<ul
				class="flex flex-col p-4 md:p-0 mt-4 font-medium border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-zinc-900 dark:border-gray-700"
			>
				{
					menuPages.map((page) => {
						const linkPath = `${BASE_URL}/${page.slug}/`;
						const isActive = linkPath === currentPage;
						return (
							<li order-by={page.order}>
								<a
									href={linkPath}
									class={
										isActive
											? "block py-2 px-3 text-white bg-blue-700 rounded-sm md:bg-transparent md:text-blue-700 md:p-0 md:dark:text-blue-500"
											: "block py-2 px-3 text-gray-900 rounded-sm hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700"
									}
								>
									{page.name}
								</a>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</nav>

<script>
	// Get references to the button and the menu
	const hamburgerButton = document.getElementById("hamburger-button");
	const navbarMenu = document.getElementById("navbar-sticky");
	const languageMenu = document.getElementById("languageMenu");

	// Add a click event listener to the hamburger button
	if (hamburgerButton && navbarMenu) {
		// Check if elements exist to prevent errors
		hamburgerButton.addEventListener("click", () => {
			// Toggle the 'hidden' class on the menu
			navbarMenu.classList.toggle("hidden");

			// Toggle aria-expanded for accessibility
			const isExpanded =
				hamburgerButton.getAttribute("aria-expanded") === "true";
			hamburgerButton.setAttribute("aria-expanded", String(!isExpanded));
		});

		// Optional: Close menu when a link is clicked (useful for mobile UX)
		// You might need to adjust this if your links navigate away
		const navLinks = navbarMenu.querySelectorAll("a");
		navLinks.forEach((link) => {
			link.addEventListener("click", () => {
				if (!navbarMenu.classList.contains("hidden")) {
					// Only close if it's open
					navbarMenu.classList.add("hidden");
					hamburgerButton.setAttribute("aria-expanded", "false");
				}
			});
		});
	}

	const languageSelector = document.getElementById("languageSelector");
	if (languageMenu) {
		languageSelector?.addEventListener("click", () => {
			languageMenu.classList.toggle("hidden");
		});
	}
</script>
