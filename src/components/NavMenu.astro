---
import { getCollection } from "astro:content";

// This tells Astro to generate each menu item
const pages = await getCollection("pages");
const menuPages = pages
	.filter((page) => page.data.main_menu === true)
	.map((page) => ({
		slug: page.slug,
		name: page.data.title,
	}));

const BASE_URL = import.meta.env.BASE_URL;
const currentPage = Astro.url.pathname;
---

<nav
	class="bg-white dark:bg-zinc-900 fixed w-full z-20 top-0 start-0 border-b border-gray-200 dark:border-gray-600"
>
	<div
		class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4"
	>
		<a href={BASE_URL} class="flex items-center space-x-3 rtl:space-x-reverse">
			<img
				src=`${BASE_URL}/static/images/tejory_logo.png`
				class="h-8"
				alt="Tejory logo"
			/>
		</a>
		<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
			<button
				type="button"
				class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
				>Get started</button
			>
			<button
				data-collapse-toggle="navbar-sticky"
				type="button"
				class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600"
				aria-controls="navbar-sticky"
				aria-expanded="false"
				id="hamburger-button"
			>
				<span class="sr-only">Open main menu</span>
				<svg
					class="w-5 h-5"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 17 14"
				>
					<path
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M1 1h15M1 7h15M1 13h15"></path>
				</svg>
			</button>
		</div>
		<div
			class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
			id="navbar-sticky"
		>
			<ul
				class="flex flex-col p-4 md:p-0 mt-4 font-medium border border-gray-100 rounded-lg bg-gray-50 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-white dark:bg-gray-800 md:dark:bg-zinc-900 dark:border-gray-700"
			>
			{
					menuPages.map((page) => {
						const linkPath = `${BASE_URL}/${page.slug}/`;
						const isActive = linkPath === currentPage;
						return (
							<li>
								<a
									href={linkPath}
									class={
										isActive
											? "block py-2 px-3 text-white bg-blue-700 rounded-sm md:bg-transparent md:text-blue-700 md:p-0 md:dark:text-blue-500"
											: "block py-2 px-3 text-gray-900 rounded-sm hover:bg-gray-100 md:hover:bg-transparent md:hover:text-blue-700 md:p-0 md:dark:hover:text-blue-500 dark:text-white dark:hover:bg-gray-700 dark:hover:text-white md:dark:hover:bg-transparent dark:border-gray-700"
									}
								>
									{page.name}
								</a>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</nav>

<script>
	// Get references to the button and the menu
	const hamburgerButton = document.getElementById("hamburger-button");
	const navbarMenu = document.getElementById("navbar-sticky");

	// Add a click event listener to the hamburger button
	if (hamburgerButton && navbarMenu) {
		// Check if elements exist to prevent errors
		hamburgerButton.addEventListener("click", () => {
			// Toggle the 'hidden' class on the menu
			navbarMenu.classList.toggle("hidden");

			// Toggle aria-expanded for accessibility
			const isExpanded =
				hamburgerButton.getAttribute("aria-expanded") === "true";
			hamburgerButton.setAttribute("aria-expanded", String(!isExpanded));
		});

		// Optional: Close menu when a link is clicked (useful for mobile UX)
		// You might need to adjust this if your links navigate away
		const navLinks = navbarMenu.querySelectorAll("a");
		navLinks.forEach((link) => {
			link.addEventListener("click", () => {
				if (!navbarMenu.classList.contains("hidden")) {
					// Only close if it's open
					navbarMenu.classList.add("hidden");
					hamburgerButton.setAttribute("aria-expanded", "false");
				}
			});
		});
	}
</script>

<script>
	// set the target element that will be collapsed or expanded (eg. navbar menu)
	const $targetEl = document.getElementById("targetEl");

	// optionally set a trigger element (eg. a button, hamburger icon)
	const $triggerEl = document.getElementById("triggerEl");

	// optional options with default values and callback functions
	const options = {
		onCollapse: () => {
			console.log("element has been collapsed");
		},
		onExpand: () => {
			console.log("element has been expanded");
		},
		onToggle: () => {
			console.log("element has been toggled");
		},
	};

	const instanceOptions = {
		id: "targetEl",
		override: true,
	};
</script>

<nav class="bg-zinc-900 border-gray-200">
	<div
		class="max-w-screen-xl flex flex-wrap items-center justify-between mx-auto p-4"
	>
		<a href={BASE_URL} class="flex items-center space-x-3 rtl:space-x-reverse">
			<img
				src=`${BASE_URL}/static/images/tejory_logo.png`
				class="h-8"
				alt="Tejory logo"
			/>
		</a>
		<div class="flex md:order-2 space-x-3 md:space-x-0 rtl:space-x-reverse">
			<button
				type="button"
				class="text-gray-200 bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-4 py-2 text-center"
				>Order Now</button
			>
			<button
				data-collapse-toggle="navbar-cta"
				type="button"
				class="inline-flex items-center p-2 w-10 h-10 justify-center text-sm text-gray-500 rounded-lg md:hidden hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200"
				aria-controls="navbar-cta"
				aria-expanded="false"
			>
				<span class="sr-only">Open main menu</span>
				<svg
					class="w-5 h-5"
					aria-hidden="true"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 17 14"
				>
					<path
						stroke="currentColor"
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d="M1 1h15M1 7h15M1 13h15"></path>
				</svg>
			</button>
		</div>
		<div
			class="items-center justify-between hidden w-full md:flex md:w-auto md:order-1"
			id="navbar-cta"
		>
			<ul
				class="flex flex-col font-medium p-4 md:p-0 mt-4 border border-gray-100 rounded-lg bg-zinc-900 md:space-x-8 rtl:space-x-reverse md:flex-row md:mt-0 md:border-0 md:bg-zinc-900"
			>
				{
					menuPages.map((page) => {
						const linkPath = `${BASE_URL}/${page.slug}/`;
						const isActive = linkPath === currentPage;
						return (
							<li>
								<a
									href={linkPath}
									class={
										isActive
											? "block py-2 px-3 md:p-0 text-white rounded-sm md:bg-transparent md:text-amber-400"
											: "block py-2 px-3 text-white rounded-sm hover:bg-gray-100 md:hover:bg-transparent md:border-0 md:hover:text-amber-300 md:p-0"
									}
								>
									{page.name}
								</a>
							</li>
						);
					})
				}
			</ul>
		</div>
	</div>
</nav>	
