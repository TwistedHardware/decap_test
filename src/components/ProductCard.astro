---
// src/components/BuyNow.astro
import { getEntry } from "astro:content";

// This component expects to receive the 'slug' of the CTA to render
const { slug } = Astro.props;

const product = await getEntry("products", slug);

if (!product) {
	throw new Error(
		`Could not find the '${slug}' page in the 'products' content collection.`,
	);
}

const statusConfig = {
	"pre-order": {
		text: "Pre-Order",
		classes: "bg-blue-600",
	},
	"under-development": {
		text: "In Development",
		classes: "bg-zinc-500",
	},
	obsolete: {
		text: "Obsolete",
		classes: "bg-zinc-800 dark:bg-black",
	},
};
const status = product.data.status;
const statusInfo = statusConfig[status as keyof typeof statusConfig];
status && status in statusConfig
	? statusConfig[status as keyof typeof statusConfig]
	: undefined;

const { Content } = await product.render();

const BASE_URL = '';
const productURL = BASE_URL + "/products/" + slug;
---

<div
	class="relative overflow-hidden w-full max-w-sm bg-white border border-zinc-200 rounded-lg shadow-sm dark:bg-zinc-800 dark:border-zinc-700 flex flex-col"
>
	{
		statusInfo && (
			<div
				class:list={[
					"absolute top-0 right-0 h-16 w-16",
					// Hides the ribbon on larger screens if you want, remove if not needed
					// 'sm:h-20 sm:w-20',
				]}
			>
				<div
					class:list={[
						"absolute transform rotate-45 text-center text-white font-semibold py-1 right-[-50px] top-[35px] w-[200px]",
						statusInfo.classes,
					]}
				>
					{statusInfo.text}
				</div>
			</div>
		)
	}

	<a href={productURL}>
		<img
			class="p-8 rounded-t-lg"
			src=`${BASE_URL}${product.data.image1}`
			alt="product image"
		/>
	</a>
	<div class="flex flex-col flex-grow px-5 pb-5">
		<a href={productURL}>
			<h3 class="text-xl font-semibold tracking-tight">
				{product.data.name}
			</h3>
		</a>
		<p>{product.data.slogan}</p>
		{
			product.data.status == "active" ? (
				<div class="flex items-center mt-2.5 mb-2">
					<div class="flex items-center space-x-1 rtl:space-x-reverse">
						{Array.from({ length: 5 }).map((_, index) =>
							index < Math.round(product.data.rating!) ? (
								<svg
									class="w-4 h-4 text-yellow-300"
									aria-hidden="true"
									xmlns="http://www.w3.org/2000/svg"
									fill="currentColor"
									viewBox="0 0 22 20"
								>
									<path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
								</svg>
							) : (
								<svg
									class="w-4 h-4 text-zinc-200 dark:text-zinc-600"
									aria-hidden="true"
									xmlns="http://www.w3.org/2000/svg"
									fill="currentColor"
									viewBox="0 0 22 20"
								>
									<path d="M20.924 7.625a1.523 1.523 0 0 0-1.238-1.044l-5.051-.734-2.259-4.577a1.534 1.534 0 0 0-2.752 0L7.365 5.847l-5.051.734A1.535 1.535 0 0 0 1.463 9.2l3.656 3.563-.863 5.031a1.532 1.532 0 0 0 2.226 1.616L11 17.033l4.518 2.375a1.534 1.534 0 0 0 2.226-1.617l-.863-5.03L20.537 9.2a1.523 1.523 0 0 0 .387-1.575Z" />
								</svg>
							),
						)}
					</div>
					<span class="bg-blue-100 text-blue-800 text-xs font-semibold px-2.5 py-0.5 rounded-sm dark:bg-amber-200 dark:text-amber-800 ms-3">
						{product.data.rating!.toFixed(1)}
					</span>
				</div>
			) : null
		}

		<!-- <div class="flex-grow overflow-hidden">
			<Content />
		</div> -->
		<div class="flex items-center justify-between my-5">
			{
				product.data.discounted_price ? (
					// If there is a discount price, show the original and discounted price
					<span>
						<span class="text-3xl font-light text-zinc-900 dark:text-zinc-400 line-through">
							${product.data.price!.toFixed(2)}
						</span>{" "}
						<span class="text-3xl font-bold text-zinc-900 dark:text-white">
							${product.data.discounted_price!.toFixed(2)}
						</span>
					</span>
				) : (
					// Else, check if a regular price exists
					<span class="text-3xl font-bold text-zinc-900 dark:text-white">
						{product.data.price ? `$${product.data.price.toFixed(2)}` : ""}
					</span>
				)
			}
		</div>
		<div class="flex items-center w-full">
			<a
				href={productURL}
				class="mx-auto text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800"
				>Learn More</a
			>
		</div>
	</div>
</div>
